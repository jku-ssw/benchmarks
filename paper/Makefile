BENCHMARK_EXEC_ARGS =
BENCHMARK_EXEC_ARGS_PAPI = $(BENCHMARK_EXEC_ARGS) --papi=PAPI_LD_INS,PAPI_SR_INS,PAPI_BR_INS,PAPI_TOT_INS,PAPI_TOT_CYC

BENCHMARK_RUNS = 2

BENCHMARK_BASE_RUNTIME = clang-6.0-O0  # TODO: change

OUTPUT_DIR_NAME = data
OUTPUT_DIR = $(CURDIR)/$(OUTPUT_DIR_NAME)

DOCKER_DIR = $(CURDIR)/../docker

ALL_TARGET_NAMES = clang-4.0 clang-5.0 clang-6.0 compcert gcc-5 gcc-6 gcc-7 gcc-8 sanitizers sulong tcc valgrind
ALL_TARGET_JSON = $(ALL_TARGET_NAMES:=.json)
ALL_TARGET_PATHS = $(addprefix $(OUTPUT_DIR_NAME)/, $(ALL_TARGET_JSON))

.PHONY: all build clean

all: $(OUTPUT_DIR_NAME)/benchmark-classification.tex build $(ALL_TARGET_PATHS) $(OUTPUT_DIR_NAME)/Rplots.pdf

build:
	$(MAKE) -C $(DOCKER_DIR) build

clean:
	rm -f $(OUTPUT_DIR_NAME)/*.json $(OUTPUT_DIR_NAME)/Rplots.pdf

$(OUTPUT_DIR_NAME)/benchmark-classification.tex:
	../docs/raw/benchmark_classification.py > $(OUTPUT_DIR)/benchmark-classification.tex

# benchmark clang
$(OUTPUT_DIR_NAME)/clang-4.0.json:
	$(MAKE) -C $(DOCKER_DIR)/BENCHMARK_CLANG-4 run OUTPUT_DIR=$(OUTPUT_DIR) BENCHMARK_RUNS=$(BENCHMARK_RUNS) BENCHMARK_EXEC_ARGS="$(BENCHMARK_EXEC_ARGS_PAPI)"

$(OUTPUT_DIR_NAME)/clang-5.0.json:
	$(MAKE) -C $(DOCKER_DIR)/BENCHMARK_CLANG-5 run OUTPUT_DIR=$(OUTPUT_DIR) BENCHMARK_RUNS=$(BENCHMARK_RUNS) BENCHMARK_EXEC_ARGS="$(BENCHMARK_EXEC_ARGS_PAPI)"

$(OUTPUT_DIR_NAME)/clang-6.0.json:
	$(MAKE) -C $(DOCKER_DIR)/BENCHMARK_CLANG-6 run OUTPUT_DIR=$(OUTPUT_DIR) BENCHMARK_RUNS=$(BENCHMARK_RUNS) BENCHMARK_EXEC_ARGS="$(BENCHMARK_EXEC_ARGS_PAPI)"

# benchmark compcert
$(OUTPUT_DIR_NAME)/compcert.json:
	$(MAKE) -C $(DOCKER_DIR)/BENCHMARK_COMPCERT run OUTPUT_DIR=$(OUTPUT_DIR) BENCHMARK_RUNS=$(BENCHMARK_RUNS) BENCHMARK_EXEC_ARGS="$(BENCHMARK_EXEC_ARGS)"

# benchmark gcc
$(OUTPUT_DIR_NAME)/gcc-5.json:
	$(MAKE) -C $(DOCKER_DIR)/BENCHMARK_GCC-5 run OUTPUT_DIR=$(OUTPUT_DIR) BENCHMARK_RUNS=$(BENCHMARK_RUNS) BENCHMARK_EXEC_ARGS="$(BENCHMARK_EXEC_ARGS_PAPI)"

$(OUTPUT_DIR_NAME)/gcc-6.json:
	$(MAKE) -C $(DOCKER_DIR)/BENCHMARK_GCC-6 run OUTPUT_DIR=$(OUTPUT_DIR) BENCHMARK_RUNS=$(BENCHMARK_RUNS) BENCHMARK_EXEC_ARGS="$(BENCHMARK_EXEC_ARGS_PAPI)"

$(OUTPUT_DIR_NAME)/gcc-7.json:
	$(MAKE) -C $(DOCKER_DIR)/BENCHMARK_GCC-7 run OUTPUT_DIR=$(OUTPUT_DIR) BENCHMARK_RUNS=$(BENCHMARK_RUNS) BENCHMARK_EXEC_ARGS="$(BENCHMARK_EXEC_ARGS_PAPI)"

$(OUTPUT_DIR_NAME)/gcc-8.json:
	$(MAKE) -C $(DOCKER_DIR)/BENCHMARK_GCC-8 run OUTPUT_DIR=$(OUTPUT_DIR) BENCHMARK_RUNS=$(BENCHMARK_RUNS) BENCHMARK_EXEC_ARGS="$(BENCHMARK_EXEC_ARGS_PAPI)"

# benchmark sanitizers (based on clang-6.0)
$(OUTPUT_DIR_NAME)/sanitizers.json: $(OUTPUT_DIR_NAME)/asan.json $(OUTPUT_DIR_NAME)/msan.json $(OUTPUT_DIR_NAME)/tsan.json $(OUTPUT_DIR_NAME)/ubsan.json
	rm -f $(OUTPUT_DIR_NAME)/sanitizers.json
	$(MAKE) -C $(DOCKER_DIR)/MERGE run OUTPUT_DIR=$(OUTPUT_DIR) MERGE_ARGS="asan.json msan.json tsan.json ubsan.json merged.json"

$(OUTPUT_DIR_NAME)/asan.json:
	$(MAKE) -C $(DOCKER_DIR)/BENCHMARK_SANITIZERS run OUTPUT_DIR=$(OUTPUT_DIR) BENCHMARK_RUNS=$(BENCHMARK_RUNS) BENCHMARK_EXEC_ARGS="$(BENCHMARK_EXEC_ARGS)" BENCHMARK_ARGS="--filter-runtime asan-O3"

$(OUTPUT_DIR_NAME)/msan.json:
	$(MAKE) -C $(DOCKER_DIR)/BENCHMARK_SANITIZERS run OUTPUT_DIR=$(OUTPUT_DIR) BENCHMARK_RUNS=$(BENCHMARK_RUNS) BENCHMARK_EXEC_ARGS="$(BENCHMARK_EXEC_ARGS)" BENCHMARK_ARGS="--filter-runtime msan-O3"

$(OUTPUT_DIR_NAME)/tsan.json:
	$(MAKE) -C $(DOCKER_DIR)/BENCHMARK_SANITIZERS run OUTPUT_DIR=$(OUTPUT_DIR) BENCHMARK_RUNS=$(BENCHMARK_RUNS) BENCHMARK_EXEC_ARGS="$(BENCHMARK_EXEC_ARGS)" BENCHMARK_ARGS="--filter-runtime tsan-O3"

$(OUTPUT_DIR_NAME)/ubsan.json:
	$(MAKE) -C $(DOCKER_DIR)/BENCHMARK_SANITIZERS run OUTPUT_DIR=$(OUTPUT_DIR) BENCHMARK_RUNS=$(BENCHMARK_RUNS) BENCHMARK_EXEC_ARGS="$(BENCHMARK_EXEC_ARGS)" BENCHMARK_ARGS="--filter-runtime ubsan-O3"


# benchmark sulong (based on clang-6.0)
$(OUTPUT_DIR_NAME)/sulong.json:
	$(MAKE) -C $(DOCKER_DIR)/BENCHMARK_SULONG run OUTPUT_DIR=$(OUTPUT_DIR) BENCHMARK_RUNS=$(BENCHMARK_RUNS) BENCHMARK_EXEC_ARGS="$(BENCHMARK_EXEC_ARGS)"
	# TODO: --filter-runtime="(sulong-warmup-0|sulong-warmup-2)" --filter-harness="(?!(faragon-libsrt|armon-libart))" --runs=1  and iterations file

# benchmark tcc
$(OUTPUT_DIR_NAME)/tcc.json:
	$(MAKE) -C $(DOCKER_DIR)/BENCHMARK_TCC run OUTPUT_DIR=$(OUTPUT_DIR) BENCHMARK_RUNS=$(BENCHMARK_RUNS) BENCHMARK_EXEC_ARGS="$(BENCHMARK_EXEC_ARGS_PAPI)"

# benchmark valgrind (based on clang-6.0)
$(OUTPUT_DIR_NAME)/valgrind.json:
	$(MAKE) -C $(DOCKER_DIR)/BENCHMARK_VALGRIND run OUTPUT_DIR=$(OUTPUT_DIR) BENCHMARK_RUNS=$(BENCHMARK_RUNS) BENCHMARK_EXEC_ARGS="$(BENCHMARK_EXEC_ARGS)"

#no-papi.json:
#	../tools/bench.py -y --filter-runtime="(gcc|clang)-(O0|O3)" no-papi.json --no-papi --suffix='-no-papi' --runs=${RUNS}

$(OUTPUT_DIR_NAME)/merged.json: $(ALL_TARGET_PATHS)
	rm -f $(OUTPUT_DIR_NAME)/merged.json
	$(MAKE) -C $(DOCKER_DIR)/MERGE run OUTPUT_DIR=$(OUTPUT_DIR) MERGE_ARGS="$(ALL_TARGET_JSON) merged.json"

$(OUTPUT_DIR_NAME)/Rplots.pdf: $(OUTPUT_DIR_NAME)/merged.json
	$(MAKE) -C $(DOCKER_DIR)/PLOT run OUTPUT_DIR=$(OUTPUT_DIR) PLOT_ARGS="--benchfile=/data/merged.json --base-runtime=$(BENCHMARK_BASE_RUNTIME)"
